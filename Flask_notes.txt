Web Application Framework or simply Web Framework represents a collection of libraries and modules that enables a web application developer to write
applications without having to bother about low-level details such as protocols, thread management etc. Flask is a web application framework written
in Python. Flask is based on the Werkzeug WSGI toolkit and Jinja2 template engine.

WSGI:

Web Server Gateway Interface (WSGI) has been adopted as a standard for Python web application development. WSGI is a specification for a universal 
interface between the web server and the web applications.

Werkzeug:

It is a WSGI toolkit, which implements requests, response objects, and other utility functions. This enables building a web framework on top of it. 
The Flask framework uses Werkzeug as one of its bases.

Jinja2:

Jinja2 is a popular templating engine for Python. A web templating system combines a template with a certain data source to render dynamic web pages.


Installation : pip install Flask

--------------------------------------

virtualenv is a virtual Python environment builder. It helps a user to create multiple Python environments side-by-side. Thereby, it can avoid comp-
atibility issues between the different versions of the libraries.

Installation: pip install virtualenv

# For Ubuntu:

virtualenv virtualenv_name		// creating

source virtualenv_name/bin/activate	// activating

deactivate				// deactivating



# For Windows:

virtualenv myenv		// creating

myenv\Scripts\activate		// activating

deactivate			// deactivating

--------------------------------------

Hello World app:

from flask import Flask
app = Flask(__name__)				// An object of Flask class is our WSGI application.

@app.route('/')
def hello_world():
   return 'Hello World'

if __name__ == '__main__':
   app.run()					// runs the app on local server


Note:

# app.run(host, port, debug, options)		// DEFAULT host = 127.0.0.1, port = 5000 , debug = false 



# Debug mode :
A Flask application is started by calling the run() method. However, while the application is under development, it should be restarted manually
for each change in the code. To avoid this inconvenience, enable debug support. The server will then reload itself if the code changes.  It will
also provide a useful debugger to track the errors if any, in the application.

--------------------------------------

It is possible to build a URL dynamically, by adding variable parts to the rule parameter. This variable part is marked as <variable-name>


from flask import Flask
app = Flask(__name__)

@app.route('/hello/<name>')
def hello_name(name):
   return 'Hello %s!' % name

@app.route('/blog/<int:postID>')					// accepts integer only
def show_blog(postID):
   return 'Blog Number %d' % postID

@app.route('/rev/<float:revNo>')					// accepts float only
def revision(revNo):
   return 'Revision Number %f' % revNo

if __name__ == '__main__':
   app.run()

--------------------------------------

The url_for() function is very useful for dynamically building a URL for a specific function. The function accepts the name of a function as first
argument, and one or more keyword arguments, each corresponding to the variable part of URL.


from flask import Flask
app = Flask(__name__)

@app.route('/admin')
def hello_admin():
   return 'Hello Admin'

@app.route('/guest/<guest>')
def hello_guest(guest):
   return 'Hello %s as Guest' % guest

@app.route('/user/<name>')
def hello_user(name):
   if name =='admin':
      return redirect(url_for('hello_admin'))
   else:
      return redirect(url_for('hello_guest',guest = name))

if __name__ == '__main__':
    app.run()

--------------------------------------

HTTP Verbs:


an HTML form and use the POST method to send form data to a URL:

<html>
   <body>
      <form action = "http://localhost:5000/login" method = "post">
         <p>Enter Name:</p>
         <p><input type = "text" name = "nm" /></p>
         <p><input type = "submit" value = "submit" /></p>
      </form>
   </body>
</html>


from flask import Flask, redirect, url_for, request
app = Flask(__name__)

@app.route('/success/<name>')
def success(name):
   return 'welcome %s' % name

@app.route('/login',methods = ['POST', 'GET'])
def login():
   if request.method == 'POST':
      user = request.form['nm']
      return redirect(url_for('success',name = user))
   else:
      user = request.args.get('nm')
      return redirect(url_for('success',name = user))

if __name__ == '__main__':
   app.run(debug = True)

--------------------------------------

Serving static files:

static
The key is that you put the static files in a directory called static next to the main application file and in the HTML skeleton you refer
to the files as /static/....

.
├── static
│   ├── css
│   │   └── style.css
│   └── img
│       └── code_maven_128.png
├── templates
│   └── main.html
└── web.py


web.py:

from flask import Flask, render_template
app = Flask(__name__)
 
@app.route("/")
def main():
    return render_template('main.html')
 
if __name__ == "__main__":
    app.run()




main.html:

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport"
     content="width=device-width, initial-scale=1, user-scalable=yes">
 
  <link href="/static/css/style.css" rel="stylesheet">
</head>
<body>
<h1>Hello World</h1>
 
<img src="static/img/code_maven_128.png" />
 
</body>
</html>





style.css:

h1 {
   color: blue;
}


To run the app : python web.py

--------------------------------------


request.data: Contains the incoming request data as string in case it came with a mimetype Flask does not handle (Mostly empty)

request.args: the key/value pairs in the URL query string

request.form: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded

request.files: the files in the body, which Flask keeps separate from form. HTML forms must use enctype=multipart/form-data or files will not be uploaded

request.values: combined args and form, preferring args if keys overlap

request.json: parsed JSON data. The request must have the application/json content type, or use request.get_json(force=True) to ignore the content type



Note: If you post JSON with content type application/json, use request.get_json() to get it in Flask


--------------------------------------

Cookies:

In Flask, cookies are set on response object. Use make_response() function to get response object from return value of a view function. After that, use 
the set_cookie() function of response object to store a cookie. The get() method of request.cookies attribute is used to read a cookie.


Flow (Top to bottom)


@app.route('/')								// step 1
def index():
   return render_template('index.html')



<html>									// step 2
   <body>
      <form action = "/setcookie" method = "POST">
         <p><h3>Enter userID</h3></p>
         <p><input type = 'text' name = 'nm'/></p>
         <p><input type = 'submit' value = 'Login'/></p>
      </form>
   </body>
</html>



@app.route('/setcookie', methods = ['POST', 'GET'])			// step 3
def setcookie():
   if request.method == 'POST':
   user = request.form['nm']
   
   resp = make_response(render_template('readcookie.html'))
   resp.set_cookie('userID', user)
   
   return resp


@app.route('/getcookie')						// step 4
def getcookie():
   name = request.cookies.get('userID')
   return '<h1>welcome '+name+'</h1>'


--------------------------------------

Sessions:

Like Cookie, Session data is stored on client. Session is the time interval when a client logs into a server and logs out of it. The data, which
is needed to be held across this session, is stored in the client browser.

A session with each client is assigned a Session ID. The Session data is stored on top of cookies and the server signs them cryptographically. 
For this encryption, a Flask application needs a defined SECRET_KEY.

Session object is also a dictionary object containing key-value pairs of session variables and associated values.



The following code is a simple demonstration of session works in Flask. URL ‘/’ simply prompts user to log in, as session variable ‘username’ 
is not set:


@app.route('/')
def index():
   if 'username' in session:
      username = session['username']
         return 'Logged in as ' + username + '<br>' + \
         "<b><a href = '/logout'>click here to log out</a></b>"
   return "You are not logged in <br><a href = '/login'></b>" + \
      "click here to log in</b></a>"


A Form is posted back to ‘/login’ and now session variable is set. Application is redirected to ‘/’. This time session variable ‘username’ is found.

@app.route('/login', methods = ['GET', 'POST'])
def login():
   if request.method == 'POST':
      session['username'] = request.form['username']
      return redirect(url_for('index'))					// The index func defined above
   return '''
	
   <form action = "" method = "post">
      <p><input type = text name = username/></p>
      <p<<input type = submit value = Login/></p>
   </form>
	
   '''

The application also contains a logout() view function, which pops out ‘username’ session variable. Hence, ‘/’ URL again shows the opening page.

@app.route('/logout')
def logout():
   # remove the username from the session if it is there
   session.pop('username', None)
   return redirect(url_for('index'))




from flask import Flask, session, redirect, url_for, escape, request	// Driver code
app = Flask(__name__)
app.secret_key = 'any random string’					// secret key


--------------------------------------

Redirect:

Flask class has a redirect() function. When called, it returns a response object and redirects the user to another target location with specified
status code.

Flask.redirect(location, statuscode, response)

location : URL where response should be redirected
statuscode : sent to browser’s header, defaults to 302

The following status codes are standardized −

HTTP_300_MULTIPLE_CHOICES
HTTP_301_MOVED_PERMANENTLY
HTTP_302_FOUND						// DEFAULT
HTTP_303_SEE_OTHER
HTTP_304_NOT_MODIFIED
HTTP_305_USE_PROXY
HTTP_306_RESERVED
HTTP_307_TEMPORARY_REDIRECT


e.g 1

from flask import Flask, redirect, url_for, render_template, request
app = Flask(__name__)

@app.route('/')
def index():
   return render_template('log_in.html')				// Assume a login page

@app.route('/login',methods = ['POST', 'GET']) 
def login(): 
   if request.method == 'POST' and request.form['username'] == 'admin' :
      return redirect(url_for('success'))
   else:
      return redirect(url_for('index'))

@app.route('/success')
def success():
   return 'logged in successfully'
	
if __name__ == '__main__':
   app.run(debug = True)


e.g 2

Flask class has abort() function with an error code.

Flask.abort(code)

The Code parameter takes one of following values −

400 − for Bad Request
401 − for Unauthenticated
403 − for Forbidden
404 − for Not Found
406 − for Not Acceptable
415 − for Unsupported Media Type
429 − Too Many Requests


Instead of re-displaying the login page, if ‘Unauthourized’ page is to be displayed, lets replace it with call to abort(401) in the previous code.


from flask import Flask, redirect, url_for, render_template, request, abort
app = Flask(__name__)

@app.route('/')
def index():
   return render_template('log_in.html')

@app.route('/login',methods = ['POST', 'GET'])
def login():
   if request.method == 'POST':
      if request.form['username'] == 'admin' :						// if the user is not admin, he/she is not authorized
         return redirect(url_for('success'))
      else:
         abort(401)
   else:
      return redirect(url_for('index'))

@app.route('/success')
def success():
   return 'logged in successfully'

if __name__ == '__main__':
   app.run(debug = True)


--------------------------------------

File Upload :

Handling file upload in Flask is very easy. It needs an HTML form with its enctype attribute set to ‘multipart/form-data’, posting the file to a URL.
The URL handler fetches file from request.files[] object and saves it to the desired location.

Each uploaded file is first saved in a temporary location on the server, before it is actually saved to its ultimate location. Name of destination 
file can be hard-coded or can be obtained from filename property of request.files[file] object.

e.g:

The following code has ‘/upload’ URL rule that displays ‘upload.html’ from the templates folder, and ‘/upload-file’ URL rule that calls uploader() 
function handling upload process.


<html>
   <body>
      <form action = "http://localhost:5000/uploader" method = "POST" 
         enctype = "multipart/form-data">
         <input type = "file" name = "file" />
         <input type = "submit"/>
      </form>
   </body>
</html>


from flask import Flask, render_template, request
from werkzeug import secure_filename
app = Flask(__name__)

@app.route('/upload')
def upload_file():
   return render_template('upload.html')
	
@app.route('/uploader', methods = ['GET', 'POST'])
def upload_file():
   if request.method == 'POST':
      f = request.files['file']
      f.save(secure_filename(f.filename))				// secure_filename is used because user's i/p cannot be trusted
      return 'file uploaded successfully'				// e.g "../../../../home/username/.bashrc" may compromise with 
									// server's file structure or may do some hacks
if __name__ == '__main__':						// secure_filename("../../../../home/username/.bashrc") = 'home_username_.bashrc' 
   app.run(debug = True)


--------------------------------------

Flask Extensions:

There are a large number of Flask extensions available. A Flask extension is a Python module, which adds specific type of support to the Flask 
application. Flask Extension Registry is a directory of extensions available. The required extension can be downloaded by pip utility.

e.g

Flask Mail − provides SMTP interface to Flask application
Flask WTF − WTF stands for WT Forms which is intended to provide the interactive user interface for the user
Flask SQLAlchemy − adds SQLAlchemy support to Flask application
Flask Sijax − Python/jQuery library that makes AJAX easy to use in web applications


--------------------------------------

Flask Mail:

A web based application is often required to have a feature of sending mail to the users/clients. Flask-Mail extension makes it very easy to set up
a simple interface with any email server.

pip install Flask-Mail

Important Parameters and Description:
	
MAIL_SERVER		Name/IP address of email server
MAIL_PORT		Port number of server used
MAIL_USE_TLS		Enable/disable Transport Security Layer encryption
MAIL_USE_SSL		Enable/disable Secure Sockets Layer encryption
MAIL_DEBUG		Debug support. Default is Flask application’s debug status
MAIL_USERNAME		User name of sender
MAIL_PASSWORD		password of sender
MAIL_DEFAULT_SENDER	sets default sender
MAIL_MAX_EMAILS		Sets maximum mails to be sent
MAIL_SUPPRESS_SEND	Sending suppressed if app.testing set to true	
MAIL_ASCII_ATTACHMENTS	If set to true, attached filenames converted to ASCII


flask-mail.Mail(app = None)		// Mail class constructor

e.g:

from flask import Flask
from flask_mail import Mail, Message

app =Flask(__name__)
mail=Mail(app)

app.config['MAIL_SERVER']='smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USERNAME'] = 'yourId@gmail.com'
app.config['MAIL_PASSWORD'] = '*****'
app.config['MAIL_USE_TLS'] = False
app.config['MAIL_USE_SSL'] = True
mail = Mail(app)

@app.route("/")
def index():
   msg = Message('Hello', sender = 'yourId@gmail.com', recipients = ['id1@gmail.com'])
   msg.body = "Hello Flask message sent from Flask-Mail"
   mail.send(msg)
   return "Sent"

if __name__ == '__main__':
   app.run(debug = True)


--------------------------------------

Flask-WTF:

Using Flask-WTF, we can define the form fields in our Python script and render them using an HTML template. It is also possible to apply validation
to the WTF field.

Installation: pip install flask-WTF


e.g

from flask_wtf import Form
from wtforms import TextField, IntegerField, TextAreaField, SubmitField, RadioField,
   SelectField

from wtforms import validators, ValidationError

class ContactForm(Form):									// validation rules for the fields inside the form
   name = TextField("Name Of Student",[validators.Required("Please enter 			// Additinally, a hidden field for CSRF token is 
      your name.")])										// created to prevent Cross Site Request Forgery attack.
   Gender = RadioField('Gender', choices = [('M','Male'),('F','Female')])
   Address = TextAreaField("Address")
   
   email = TextField("Email",[validators.Required("Please enter your email address."),
      validators.Email("Please enter your email address.")])
   
   Age = IntegerField("age")
   language = SelectField('Languages', choices = [('cpp', 'C++'), 
      ('py', 'Python')])
   submit = SubmitField("Send")





from flask import Flask, render_template, request, flash
from forms import ContactForm
app = Flask(__name__)
app.secret_key = 'development key'

@app.route('/contact', methods = ['GET', 'POST'])
def contact():
   form = ContactForm()									// creates a WTForm
   
   if request.method == 'POST':
      if form.validate() == False:							// validates the received(posted by HTML below) data						
         flash('All fields are required.')
         return render_template('contact.html', form = form)
      else:
         return render_template('success.html')
      elif request.method == 'GET':
         return render_template('contact.html', form = form)

if __name__ == '__main__':
   app.run(debug = True)




<!doctype html>
<html>
   <body>
      <h2 style = "text-align: center;">Contact Form</h2>
		
      {% for message in form.name.errors %}
         <div>{{ message }}</div>
      {% endfor %}
      
      {% for message in form.email.errors %}
         <div>{{ message }}</div>
      {% endfor %}
      
      <form action = "http://localhost:5000/contact" method = post>				// makes a post call with form data
         <fieldset>
            <legend>Contact Form</legend>
            {{ form.hidden_tag() }}
            
            <div style = font-size:20px; font-weight:bold; margin-left:150px;>
               {{ form.name.label }}<br>
               {{ form.name }}
               <br>
               
               {{ form.Gender.label }} {{ form.Gender }}
               {{ form.Address.label }}<br>
               {{ form.Address }}
               <br>
               
               {{ form.email.label }}<br>
               {{ form.email }}
               <br>
               
               {{ form.Age.label }}<br>
               {{ form.Age }}
               <br>
               
               {{ form.language.label }}<br>
               {{ form.language }}
               <br>
               {{ form.submit }}
            </div>
            
         </fieldset>
      </form>
   </body>
</html>



--------------------------------------

SQlite:

Python has an in-built support for SQlite

e.g: (app to add/list student records)


database.db:									// db connection and table creation

import sqlite3

conn = sqlite3.connect('database.db')
print "Opened database successfully";

conn.execute('CREATE TABLE students (name TEXT, addr TEXT, city TEXT, pin TEXT)')
print "Table created successfully";
conn.close()


student.html:									// adding a student record

<html>
   <body>
      <form action = "{{ url_for('addrec') }}" method = "POST">
         <h3>Student Information</h3>
         Name<br>
         <input type = "text" name = "nm" /></br>
         
         Address<br>
         <textarea name = "add" ></textarea><br>
         
         City<br>
         <input type = "text" name = "city" /><br>
         
         PINCODE<br>
         <input type = "text" name = "pin" /><br>
         <input type = "submit" value = "submit" /><br>
      </form>
   </body>
</html>




result.html:							// form to be rendered post record addition result

<!doctype html>
<html>
   <body>
      result of addition : {{ msg }}
      <h2><a href = "\">go back to home page</a></h2>
   </body>
</html>



list.html:							// Listing of students

<!doctype html>
<html>
   <body>
      <table border = 1>
         <thead>
            <td>Name</td>
            <td>Address>/td<
            <td>city</td>
            <td>Pincode</td>
         </thead>
         
         {% for row in rows %}
            <tr>
               <td>{{row["name"]}}</td>
               <td>{{row["addr"]}}</td>
               <td> {{ row["city"]}}</td>
               <td>{{row['pin']}}</td>	
            </tr>
         {% endfor %}
      </table>
      
      <a href = "/">Go back to home page</a>
   </body>
</html>



app:

from flask import Flask, render_template, request
import sqlite3 as sql								// import
app = Flask(__name__)

@app.route('/')
def home():
   return render_template('home.html')

@app.route('/enternew')
def new_student():
   return render_template('student.html')

@app.route('/addrec',methods = ['POST', 'GET'])
def addrec():
   if request.method == 'POST':
      try:
         nm = request.form['nm']
         addr = request.form['add']
         city = request.form['city']
         pin = request.form['pin']
         
         with sql.connect("database.db") as con:
            cur = con.cursor()
            
            cur.execute("INSERT INTO students (name,addr,city,pin) 
               VALUES (?,?,?,?)",(nm,addr,city,pin) )
            
            con.commit()
            msg = "Record successfully added"
      except:
         con.rollback()
         msg = "error in insert operation"
      
      finally:
         return render_template("result.html",msg = msg)
         con.close()

@app.route('/list')
def list():
   con = sql.connect("database.db")
   con.row_factory = sql.Row
   
   cur = con.cursor()
   cur.execute("select * from students")
   
   rows = cur.fetchall();
   return render_template("list.html",rows = rows)

if __name__ == '__main__':
   app.run(debug = True)


--------------------------------------

SQLAlchemy:

Using raw SQL in Flask web applications to perform CRUD operations on database can be tedious. Instead, SQLAlchemy, a Python toolkit is a 
powerful OR Mapper that gives application developers the full power and flexibility of SQL.

What is ORM (Object Relation Mapping)?

Most programming language platforms are object oriented. Data in RDBMS servers on the other hand is stored as tables. Object relation mapping 
is a technique of mapping object parameters to the underlying RDBMS table structure. An ORM API provides methods to perform CRUD operations 
without having to write raw SQL statements.

Installation: pip install flask-sqlalchemy



from flask import Flask, request, flash, url_for, redirect, render_template
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///students.sqlite3'				// URI for the database
app.config['SECRET_KEY'] = "random string"

db = SQLAlchemy(app)

class students(db.Model):									// db.model to make sure this class obj will 
												// be used for ORM
   id = db.Column('student_id', db.Integer, primary_key = True)
   name = db.Column(db.String(100))
   city = db.Column(db.String(50))
   addr = db.Column(db.String(200)) 
   pin = db.Column(db.String(10))

def __init__(self, name, city, addr,pin):
   self.name = name
   self.city = city
   self.addr = addr
   self.pin = pin

@app.route('/')
def show_all():
   return render_template('show_all.html', students = students.query.all() )			// assume 'show_all.html' for listing student details

@app.route('/new', methods = ['GET', 'POST'])
def new():
   if request.method == 'POST':
      if not request.form['name'] or not request.form['city'] or not request.form['addr']:
         flash('Please enter all the fields', 'error')						// flash is like alert() of JS
      else:
         student = students(request.form['name'], request.form['city'],
            request.form['addr'], request.form['pin'])
         
         db.session.add(student)
         db.session.commit()
         flash('Record was successfully added')
         return redirect(url_for('show_all'))		
   return render_template('new.html')								// assume 'new.html' as the land up page for student 
												// addition
if __name__ == '__main__':
   db.create_all()										// To create / use database mentioned in URI
   app.run(debug = True)


--------------------------------------


