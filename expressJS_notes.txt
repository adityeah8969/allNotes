ExpressJS is a web application framework that provides you with a simple API to build websites, web apps and back ends. Express provides a minimal 
interface to build our applications. It provides us the tools that are required to build our app. It is flexible as there are numerous modules
available on npm, which can be directly plugged into Express.

Node Package Manager(npm): The npm Registry is a public collection of packages of open-source code for Node.js, front-end web apps, mobile apps,
			   robots, routers, and countless other needs of the JavaScript community.

There are two ways to install a package using npm:

i>  Globally: npm install -g <package-name>
ii> Locally:  npm install <package-name>	// can be used only within the directory it is installed.

What is the file `package.json`?

All npm packages contain a file, usually in the project root, called package.json - this file holds various metadata relevant to the project.
This file is used to give information to npm that allows it to identify the project as well as handle the project's dependencies. It can also
contain other metadata such as a project description, the version of the project in a particular distribution, license information, 
even configuration data - all of which can be vital to both npm and to the end users of the package. The package.json file is normally located 
at the root directory of a Node.js project. 

sample:

{
  "name" : "underscore",
  "description" : "JavaScript's functional programming helper library.",
  "homepage" : "http://documentcloud.github.com/underscore/",
  "keywords" : ["util", "functional", "server", "client", "browser"],
  "author" : "Jeremy Ashkenas <jeremy@documentcloud.org>",
  "contributors" : [],
  "dependencies" : [],
  "repository" : {"type": "git", "url": "git://github.com/documentcloud/underscore.git"},
  "main" : "underscore.js",
  "version" : "1.1.6"
}

	

Whenever we create a project using npm, we need to provide a package.json file, which has all the details about our project. Following are the
steps:

i>  Start your terminal/cmd, create a new folder named hello-world and cd (create directory) into it âˆ’
ii> Now to create the package.json file using npm init and enter subsequent fields like author name etc.

package.json file created!!!!

installing express

npm install --save express	// --save ensures that Express is added as a dependency to our package.json file.
				// This has an advantage, the next time we need to install all the dependencies of 
				// our project we can just run the command npm install and it will find the dependencies
				//  in this file and install them for us.

To make our development process a lot easier, we will install a tool from npm, nodemon. This tool restarts our server as soon as we make a
change in any of our files, otherwise we need to restart the server manually after each file modification.

npm install -g nodemon


------------------------------------------------------------------------------------------

sample express app:

var express = require('express');
var app = express();

app.get('/', function(req, res){
   res.send("Hello world!");
});

app.listen(3000);


command:  nodemon index.js


How the App Works?

# app.get(route, callback)

This function tells what to do when a get request at the given route is called. The callback function has 2 parameters, request(req) 
and response(res). The request object(req) represents the HTTP request and has properties for the request query string, parameters, 
body, HTTP headers, etc. Similarly, the response object represents the HTTP response that the Express app sends when it receives an 
HTTP request.

# res.send()

This function takes an object as input and it sends this to the requesting client. Here we are sending the string "Hello World!".

# app.listen(port, [host], [backlog], [callback]])

This function binds and listens for connections on the specified host and port.
	
port: A port number on which the server should accept incoming requests.
host: Name of the domain. You need to set it when you deploy your apps to the cloud.
backlog: The maximum number of queued pending connections. The default is 511.	
callback: An asynchronous function that is called when the server starts listening for requests.

------------------------------------------------------------------------------------------

Routers are very helpful in separating concerns and keep relevant portions of our code together. They help in building maintainable code.
You should define your routes relating to an entity in a single file and include it using the above method in your index.js file.

# things.js:

var express = require('express');
router = express.Router();

router.get('/', function(req, res){
    res.send('GET route on things.');
});

router.post('/', function(req, res){
    res.send('POST rote on things.');
});

module.exports = router;		// Module exports are the instructions that tell Node.js which bits of code (functions, objects,
					// strings, etc.) to export from a given file so that other files are allowed to access the exported code.



# app.js:

var express = require('express');
var app = express();

var things = require('./things');	// requiring things.js
app.use('/things', things);		// '/things' get added to the beginnning of every route on the resource 'things'

app.listen(5001);


command: nodemon app.js

navigating to 'http://localhost:5001/things/' 
GET route on things.



------------------------------------------------------------------------------------------

req.params object can be used to access all the parameterspassd inside the url.

e.g 1:

var express = require('express');
app = express();

app.get('/:id', function(req, res){
    res.send('the id getting passed is '+ req.params.id);
});

app.listen(3000);

command: nodemon app.js

navigating to 'http://localhost:3000/123'
the id getting passed is 123



e.g 2:

var express = require('express');
var app = express();

app.get('/things/:id([0-9]{5})', function(req, res){
   res.send('id: ' + req.params.id);
});

app.get('*', function(req, res){			 // Default route in case there is no match 
    res.send('Sorry, this is an invalid URL.');
});

app.listen(3000);


navigating to 'http://localhost:3000/123'		// Sorry, this is an invalid URL.
navigating to 'http://localhost:3000/12345'		// id: 12345


------------------------------------------------------------------------------------------


# static files:

Static files are files that clients download as they are from the server. Create a new directory, public. Express, by default does 
not allow you to serve static files. You need to enable it using the following built-in middleware.

app.use(express.static('public'));

e.g:

var express = require('express');
var app = express();

app.use(express.static('public'));
app.use(express.static('images'));

app.listen(3000);

------------------------------------------------------------------------------------------

Mongoose library:

Mongoose is used for document Modeling in Node for MongoDB. For document modeling, we create a Model (much like a class in document
oriented programming), and then we produce documents using this Model (like we create documents of a class in OOP). All our processing
will be done on these "documents", then finally, we will write these documents in our database.

let there be a mongoDB database 'my_db' already setup

# mongoose installation

npm install --save mongoose


# mongoDB connection

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/my_db');		// connect to the mongodb service running on mongodb://localhost

# Model

The following code defines the schema for a person and is used to create a Mongoose Mode Person. Use the following code, before defining any route 

var personSchema = mongoose.Schema({
   name: String,
   age: Number,
   nationality: String
});

var Person = mongoose.model("Person", personSchema);


# Find:

e.g 1

Person.find({name: "Ayush", age: 20}, 
   function(err, response){
      console.log(response);
});


e.g 2

Person.find({nationality: "Indian"}, "name", function(err, response){			// only the names of people whose nationality is "Indian"
   console.log(response);
});


e.g 3

Person.findById("507f1f77bcf86cd799439011", function(err, response){
   console.log(response);
});


e.g

var express = require('express');
var app = express();

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/my_db');

var personSchema = mongoose.Schema({
   name: String,
   age: Number,
   nationality: String
});

var Person = mongoose.model("Person", personSchema);

app.get('/people', function(req, res){
   Person.find(function(err, response){				// finds all the documents matching the fields in conditions object
      res.json(response);
   });
});

app.listen(3000);

# Update

var express = require('express');
var app = express();

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/my_db');

var personSchema = mongoose.Schema({
   name: String,
   age: Number,
   nationality: String
});

var Person = mongoose.model("Person", personSchema);

app.put('/people/:id', function(req, res){
   Person.findByIdAndUpdate(req.params.id, req.body, function(err, response){
      if(err) res.json({message: "Error in updating person with id " + req.params.id});
      res.json(response);
   });
});

app.listen(3000);


# Update:

general syntax: Model.update(condition, updates, callback)

Person.findOneAndUpdate({name: "Ayush"}, {age: 40}, function(err, response) {		// updates the first document match of name 'Ayush'
   console.log(response);								// with age 40
});


Person.findByIdAndUpdate("507f1f77bcf86cd799439011", {name: "James"}, 
   function(err, response){
      console.log(response);
});


e.g:

var express = require('express');
var app = express();

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/my_db');

var personSchema = mongoose.Schema({
   name: String,
   age: Number,
   nationality: String
});

var Person = mongoose.model("Person", personSchema);

app.put('/people/:id', function(req, res){
   Person.findByIdAndUpdate(req.params.id, req.body, function(err, response){		// updates using req.body
      if(err) res.json({message: "Error in updating person with id " + req.params.id});
      res.json(response);
   });
});

app.listen(3000);

# Delete

var express = require('express');
var app = express();

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/my_db');

var personSchema = mongoose.Schema({
   name: String,
   age: Number,
   nationality: String
});

var Person = mongoose.model("Person", personSchema);

app.delete('/people/:id', function(req, res){
   Person.findByIdAndRemove(req.params.id, function(err, response){
      if(err) res.json({message: "Error in deleting record id " + req.params.id});
      else res.json({message: "Person with id " + req.params.id + " removed."});
   });
});

app.listen(3000);


------------------------------------------------------------------------------------------

Middleware:

Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware
function in the applicationâ€™s request-response cycle. These functions are used to modify req and res objects for tasks like parsing
request bodies, adding response headers, etc.

e.g:

var express = require('express')
var app = express()

var myLogger = function (req, res, next) {
  console.log('LOGGED')
  next()					// passes on the request to the next middleware function in the stack by calling the next() function
}

app.use(myLogger)

app.get('/', function (req, res) {
  res.send('Hello World!')
})


# Application level middleware:

Bind application-level middleware to an instance of the app object by using the app.use() and app.METHOD() functions, where METHOD is
the HTTP method of the request that the middleware function handles (such as GET, PUT, or POST) in lowercase.


e.g 1:

app.use(function (req, res, next) {		// middleware function with no mount(route) path
  console.log('Time:', Date.now())		// gets executed every time the app receives a request
  next()
})

e.g 2:

app.use('/user/:id', function (req, res, next){ // middleware function mounted on the /user/:id path
  console.log('Request Type:', req.method)
  next()
})

e.g 3:

app.use('/user/:id', function (req, res, next) { // example of loading a series of middleware functions at a mount point
  console.log('Request URL:', req.originalUrl)
  next()					// next() calls the next middleware right after the current
}, function (req, res, next) {
  console.log('Request Type:', req.method)
  next()
})

e.g 3:

app.get('/user/:id', function (req, res, next) {
  if (req.params.id === '0') next('route')	// skipping to next route
  else next()					// skipping to next middleware function chained right after
}, function (req, res, next) {
  res.send('regular')
})


app.get('/user/:id', function (req, res, next) {// handler for the /user/:id path, which sends a special response
  res.send('special')
})


# Router-level middleware

Router-level middleware works in the same way as application-level middleware, except it is bound to an instance of express.Router().

e.g:

var express = require('express')
var app = express()
var router = express.Router()

router.use(function (req, res, next) {
  console.log('Time:', Date.now())
  next()
})

router.use('/user/:id', function (req, res, next) {
  console.log('Request URL:', req.originalUrl)
  next()
}, function (req, res, next) {
  console.log('Request Type:', req.method)
  next()
})

router.get('/user/:id', function (req, res, next) {
  if (req.params.id === '0') next('route')
  else next()
}, function (req, res, next) {
  res.render('regular')
})

router.get('/user/:id', function (req, res, next) {
  console.log(req.params.id)
  res.render('special')
})

app.use('/', router)


# Error handling middleware:

andling middleware functions in the same way as other middleware functions, except with four arguments instead of three, specifically 
with the signature (err, req, res, next)):

app.use(function (err, req, res, next) {
  console.error(err.stack)
  res.status(500).send('Something broke!')
})

# Third-party middleware:

Finally, weâ€™ll create a middleware function that validates incoming cookies and sends a 400 response if cookies are invalid.

Hereâ€™s an example function that validates cookies with an external async service.

async function cookieValidator (cookies) {
  try {
    await externallyValidateCookie(cookies.testCookie)
  } catch {
    throw new Error('Invalid cookies')
  }
}

Here we use the cookie-parser middleware to parse incoming cookies off the req object and pass them to our cookieValidator function. 
The validateCookies middleware returns a Promise that upon rejection will automatically trigger our error handler.

var express = require('express')
var cookieParser = require('cookie-parser')
var cookieValidator = require('./cookieValidator')

var app = express()

async function validateCookies (req, res, next) {
  await cookieValidator(req.cookies)		// if this resolves then only next() will be called
  next()					// otherwise error will be returned by the 'cookieValidator' function definition, which
}						// skips all the other middleware functions, routes and finally reaching error handler.

app.use(cookieParser())				// parses Cookie header and populate req.cookies with an object keyed by cookie names.
						// which later gets used in validateCookies middleware.
	
app.use(validateCookies)

// error handler
app.use(function (err, req, res, next) {
  res.status(400).send(err.message)
})

app.listen(3000)



------------------------------------------------------------------------------------------

Sessions:

HTTP is stateless; in order to associate a request to any other request, you need a way to store user data between HTTP requests. 
Cookies and URL parameters are both suitable ways to transport data between the client and the server. But they are both readable 
and on the client side. Sessions solve exactly this problem. You assign the client an ID and it makes all further requests using
that ID. Information associated with the client is stored on the server linked to this ID.

installing express-session : npm install --save express-session

e.g:

var express = require('express');
var cookieParser = require('cookie-parser');
var session = require('express-session');

var app = express();

app.use(cookieParser());
app.use(session({secret: "Shh, its a secret!"}));	// The session middleware handles all things for us, i.e., creating the session,
							// setting the session cookie and creating the session object in req object.

app.get('/', function(req, res){
   if(req.session.page_views){
      req.session.page_views++;
      res.send("You visited this page " + req.session.page_views + " times");
   } else {
      req.session.page_views = 1;
      res.send("Welcome to this page for the first time!");
   }
});
app.listen(3000);

------------------------------------------------------------------------------------------

Restful APIs:


var express = require('express');
var router = express.Router();
var movies = [
   {id: 101, name: "Fight Club", year: 1999, rating: 8.1},
   {id: 102, name: "Inception", year: 2010, rating: 8.7},
   {id: 103, name: "The Dark Knight", year: 2008, rating: 9},
   {id: 104, name: "12 Angry Men", year: 1957, rating: 8.9}
];
router.get('/:id([0-9]{3,})', function(req, res){
   var currMovie = movies.filter(function(movie){
      if(movie.id == req.params.id){
         return true;
      }
   });
   
   if(currMovie.length == 1){
      res.json(currMovie[0])
   } else {
      res.status(404);  //Set status to 404 as movie was not found
      res.json({message: "Not Found"});
   }
});
router.post('/', function(req, res){
   //Check if all fields are provided and are valid:
   if(!req.body.name ||
      !req.body.year.toString().match(/^[0-9]{4}$/g) ||
      !req.body.rating.toString().match(/^[0-9]\.[0-9]$/g)){
      res.status(400);
      res.json({message: "Bad Request"});
   } else {
      var newId = movies[movies.length-1].id+1;
      movies.push({
         id: newId,
         name: req.body.name,
         year: req.body.year,
         rating: req.body.rating
      });
      res.json({message: "New movie created.", location: "/movies/" + newId});
   }
});

router.put('/:id', function(req, res) {
   //Check if all fields are provided and are valid:
   if(!req.body.name ||
      !req.body.year.toString().match(/^[0-9]{4}$/g) ||
      !req.body.rating.toString().match(/^[0-9]\.[0-9]$/g) ||
      !req.params.id.toString().match(/^[0-9]{3,}$/g)){
      res.status(400);
      res.json({message: "Bad Request"});
   } else {
      //Gets us the index of movie with given id.
      var updateIndex = movies.map(function(movie){
         return movie.id;
      }).indexOf(parseInt(req.params.id));
      
      if(updateIndex === -1){
         //Movie not found, create new
         movies.push({
            id: req.params.id,
            name: req.body.name,
            year: req.body.year,
            rating: req.body.rating
         });
         res.json({
            message: "New movie created.", location: "/movies/" + req.params.id});
      } else {
         //Update existing movie
         movies[updateIndex] = {
            id: req.params.id,
            name: req.body.name,
            year: req.body.year,
            rating: req.body.rating
         };
         res.json({message: "Movie id " + req.params.id + " updated.",
            location: "/movies/" + req.params.id});
      }
   }
});

router.delete('/:id', function(req, res){
   var removeIndex = movies.map(function(movie){
      return movie.id;
   }).indexOf(req.params.id); //Gets us the index of movie with given id.
   
   if(removeIndex === -1){
      res.json({message: "Not found"});
   } else {
      movies.splice(removeIndex, 1);
      res.send({message: "Movie id " + req.params.id + " removed."});
   }
});
module.exports = router;






















	

